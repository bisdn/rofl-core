/**
*
* @mainpage ROFL-common
*
* @section doc Documentation
*
* @subsection doc_intro Introduction
*
* @subsubsection doc_intro_what_is_it What is it?
*
* The Revised OpenFlow Library Common Part is a C++ library providing 
* support for speaking the OpenFlow protocol as defined by the 
* Open Networking Foundation (ONF) [1]. It aims towards multi-version
* support including OpenFlow v1.0, v1.2 and v1.3. 
*
* [1] http://www.opennetworking.org
*
* rofl-common provides basic support for the OpenFlow protocol (protocol 
* parsers, message mangling, etc.) and maps the protocol's wire representation 
* to a set of C++ classes. It hides the nasty details of the protocol and 
* provides a simple-to-use API for adding OpenFlow endpoints to other software 
* projects. rofl-common complements rofl-pipeline contains an OpenFlow v1.x 
* compliant pipeline written in C. 
*
* @subsection doc_features Features
*
* - OpenFlow protocol library written in C++-98 (requires STL support)
* - Seeking for supporting all features defined by OpenFlow v1.3.x 
* - Supports management of multiple controller and data path entities in parallel
* - OpenFlow session negotiation 
* - Multi-version support (OpenFlow v1.0, v1.2, v1.3)
* - Ready-to-run I/O framework and event loop
* - Full mapping of all OpenFlow's C structures into C++ classes
* - Supports controller and data path role or may act in proxy mode
*
* @subsection doc_license License
*
* All ROFL libraries have been released under "Mozilla Public License 2.0":http://www.mozilla.org/MPL/2.0/.
*
* @subsection doc_how_to_use_it How to use it, Documentation and Support
*
* The best source of information is this doxygen documentation you are currently reading.
* The most up-to-date version can be found in the sources or under the following URL:
*
* https://bisdn.github.io/rofl-core/rofl-common/index.html 
*
* Use the <a href="https://bisdn.github.io/rofl-core/rofl-common/modules.html">Modules</a> page for details 
* about rolf-common's internal architecture and how to use it.
*
* just next to the documentation covering rofl-pipeline:
*
* https://bisdn.github.io/rofl-core/rofl-pipeline/index.html.
*
* If you find yourself with a bunch of unanswered questions after reading all 
* available information here, feel free to send an e-mail to _rofl_ _(at)_ _bisdn.de_. 
* We will try to help but the usual excuses apply to us as well (too busy, 
* lots of projects running, lack of money, too much administrative stuff to do, etc.),
* so please be patient.
*
* We highly appreciate to get a note from you if you intend to use ROFL in your project or 
* if you need some help with implementing a new feature. Maybe it is already on our 
* roadmap as well. Having said that, ROFL has been quite useful in a number of 
* projects already, but we consider it still *alpha* software, i.e. there is a non-null 
* probability to stumble across bugs. If you think you have found one (of course, this 
* is impossible, but who knows), please send us a bug report to _rofl_ _(at)_ _bisdn.de_
* or file a ticket under https://github.com/bisdn/rofl-core/issues. 
* 
* Many thanks!
*
* @subsection doc_build How to get it and Build Instructions
*
* You need one of the usual fairly modern Linux distributions. It works under Fedora 
* and Debian, but should compile on other systems as well. You need a GNU build system 
* (autoconf [2], automake [3], libtool [4], ...) for compiling the code. 
* There is support for using the OpenSSL [5] library with rofl-common for 
* encrypting plain sockets for the OpenFlow control channel, so you may want
* this as well. Finally, CppUnit [6] is used for some unit tests if you want
* to run make check. 
*
* [2] <a href="http://www.gnu.org/software/autoconf/">autoconf</a>
*
* [3] <a href="http://www.gnu.org/software/automake/">automake</a>
*
* [4] <a href="http://www.gnu.org/software/libtool/">libtool</a>
*
* [5] <a href="https://www.openssl.org/">OpenSSL</a>
*
* [6] <a href="http://sourceforge.net/projects/cppunit/">CppUnit</a>
* 
* @subsubsection doc_build_step1 Step 1: Grab a copy of the source code.
* 
* @code
sh# git clone https://github.com/bisdn/rofl-core.git
* @endcode
*
* @subsubsection doc_build_step2 Step 2: Enter the rofl-core directory and call the autogen.sh script
*
* @code
sh# sh autogen.sh
* @endcode
*
* @subsubsection doc_build_step3 Step 3: Enter the build directory and call configure
*
* @code
sh# cd build/
sh# ../configure
* @endcode
*
* @subsubsection doc_build_step4 Step 4: Call make and make install
*
* Default installation directory is _/usr/local_, so you might need rights to add files there or change the installation prefix when executing the _configure_ script.
*
* @code 
sh# make 
sh# make check #Optional
sh# sudo make install
* @endcode
*
* @subsubsection doc_build_optional_params Some optional parameters for @../configure@
*
* @code
--enable-debug: Compile with debug symbols (@-g@) and debug output (warning, it may affect performance).
--disable-silent-rules: Enable verbose compilation mode (@AM_SILENT_RULES@ disabled)
--enable-doc: Generate documentation along with compilation (for @ROFL@, @ROFL-pipeline@ and @ROFL-hal@). Make sure Doxygen and other dependencies are installed.
* @endcode
*
* @subsection doc_xdpd Extensible Data Path Daemon
*
* We have created a data path implementation on top of ROFL: the "extensible Data Path Daemon".
* 
* xdpd is a modular framework for building your own data path seeking to help you in supporting various hardware platforms. 
* 
* More information can be found on the <a href="http://www.xdpd.org">xdpd project site</a>
* or at <a href="https://github.com/bisdn/xdpd">https://github.com/bisdn/xdpd</a>.
*
*/













/**
*
* @mainpage ROFL-PIPELINE library
*
* @section doc Documentation 
* @subsection intro_sec Concept
*
* The ROFL-pipeline library is a platform-independent Openflow forwarding backend engine. The intention was to create a unified common Openflow forwarding backend for several platforms supported by our eXtensible DataPath (xDP <b><-link</
b>) in <a href="https://www.bisdn.de">BISDN</a>, like the UNIX, Network procesors or Broadcom family boards.
* 
* Features:
*  - Complete Openflow processing pipeline, including abstractions of switch (forwarding only), pipeline, table, entry, matches, actions... as well as the subsystems of timers and stats.
*  - Support for multiple Openflow pipeline versions simultaneously (in different logical switches).
*  - Platform indepedent: the library is decoupled from platform specific code. 
*  - Supports logical switch up to  \link PHYSICAL_SWITCH_MAX_LS \endlink running in parallel.
*  - Runtime port(interface) attachment/detachment to/from logical switches
*  - Extensible library:
*     - Easy addition of new Openflow versions
*     - New Openflow Matches
*     - New Openflow Actions 
*     - Clear API to create new software Table Matching Algorithms (flow entry lookup)
*  - Optimzed for performance: specially when using advanced matching algorithms.
*  
* @subsubsection how_can How can ROFL-pipeline library be used
*
*  - As the <b>forwarding engine of an Openflow software switch</b>: take a look at xDP software switch that uses ROFL-pipeline in its platform drivers. 
*  - To <b>keep the state of the forwarding backend</b> and <b>process flow entry expirations</b> and/or <b>some packets</b> in <b>hybrid hardware/software switches</b>: typically hardware switches that do not support
*    all of the capabilities exposed by Openflow, and some must be done in software within embedded systems. 
*  - To <b>only keep the state of the forwarding backend (Openflow configuration)</b> of Openflow Hardware switches: generally to be used by the Openflow endpoint(s)
*
* @subsubsection what_is_not ROFL-pipeline is not...
* 
*  - ...a full-fletched Datapath; it cannot be since it deliverately does not provide Openflow endpoint functionality (neither an Openflow protocol parser), nor the platform specific I/O subsystem for packet handling and injection to the 
Openflow pipeline. Take a look at our xDP for a full-blown datapath using ROFL-pipeline.
*  - ...a complete Openflow-enabled Forwarding Backend; ROFL-pipeline is deliverately platform independent <b>library</b>, hence it does not deal with things like the I/O subsystem or other platform specific subsytems. Take a look at our 
xDP for a complete Openflow-enabled Forwarding Backend that uses ROFL-pipeline.
*  - ...an Openflow endpoint. The Openflow endpoint is out of the scope of ROFL-pipeline.
*
* @subsection arch Architecture overview
*
* @code
* @endcode
*
* Exposed by the library:
*
*  - @ref core "Core APIs and data structures": @copybrief core
*  - @ref mgmt : @copybrief mgmt 
*  - @ref sw_runtime : @copybrief sw_runtime 
*
* Consumed by the library:
*  - @ref platform "Platform dependent APIs", which are subdivided in: 
     - @ref platform_memory : @copybrief platform_memory
     - @ref platform_lock : @copybrief platform_lock
     - @ref platform_atomic : @copybrief platform_atomic
     - @ref platform_packet : @copybrief platform_packet
*  - @ref async_events_hooks : @copybrief async_events_hooks 
*  - @ref core_ma : @copybrief core_ma 
*
* @subsection contrib How to contribute:
*
* TODO...
* @subsection rel_proj Related projects:
*
*  TODO: ROFL, xDP, ROFL-HAL (Abstract Forwarding API)
*
* @subsection author Authors:
*  - Marc Sune Clos <marc.sune (at) bisdn.de>
*  - Victor Alvarez Roig <victor.alvarez (at) bisdn.de>
*  - Tobias Jungel <tobias.jungel (at) bisdn.de>
*  - Andreas Koepsel <andreas.koepsel (at) bisdn.de>
*
* TODO: link to BISDN website
*
* @subsection license Licensing:
*
* The code is distributed under MPL v2: http://www.mozilla.org/MPL/ 
*
* The ROFL pipeline library is part of a more extensive C/C++ library called ROFL (Revised OpenFlow Library).
* 
*/

