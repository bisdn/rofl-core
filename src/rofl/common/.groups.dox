//
// Doxygen group definition
//

/**
 * @defgroup common Revised OpenFlow Library Common Part
 *
 * The Revised OpenFlow Library common part (ROFL) is a library for implementing the OpenFlow
 * protocol as defined by the Open Networking Foundation (ONF), see [1]. 
 * Its basic task is to provide an OpenFlow communication abstraction for entities acting in datapath role, 
 * controller role or both and implements besides a protocol parser, all logic to map OpenFlow 
 * messages into corresponding C++ classes. rofl-common was build in a modular way for easy 
 * extensibility and supports a number of OpenFlow versions: v1.0, v1.2, v1.3 at the time 
 * of writing. 
 *
 * rofl-common is available under Mozilla Public License v2.0. 
 *
 * [1] https://www.opennetworking.org
 * 
 */

/**
 * @defgroup common_howto A brief introduction how to use rofl-common 
 * @ingroup common
 *
 * In this section we provide a few examples, how to use rofl-common  
 * and OpenFlow protocol endpoints in a project and all classes and means 
 * provided to manage OpenFlow control connections and how to handle incoming and
 * send outgoing OpenFlow messages. ROFL supports various usage scenarios like 
 * controller or datapath role and may also serve for building proxy entities.
 * It provides a simple-to-use high level interface to OpenFlow mitigating OpenFlow's
 * complexity in day-to-day operations, but its hierarchical design also allows 
 * to replace one or multiple of the higher abstraction layers for getting direct 
 * access to the low-level routines. See module @ref common_devel_workflow for a 
 * more detailed view on ROFL's internal architecture. 
 *
 * a) We start with a simple controller application to demonstrate some core
 * principles named ethswctld (see module above).
 *
 * b) An advanced datapath element build on top of rofl-common and rofl-pipeline
 * is available as <a href="https://github.com/bisdn/xdpd">extensible datapath 
 * daemon (xdpd)</a> 
 *
 * c) A more complete example of a controller application demonstrating some more
 * advanced strategies for building a useful OpenFlow controller is the 
 * <a href="https://github.com/bisdn/basebox">base box daemon</a>.
 */

/**
 * @defgroup common_howto_ethswctld A simple controller application: ethswctld 
 * @ingroup common_howto
 *
 * As previously outlined, rofl-common is a collection of C++ classes of
 * OpenFlow data structures each capable of mapping its internal state
 * to a simple-to-use C++ interface or the associated TCP wire representation
 * required for sending OpenFlow messages to a peer entity. In addition, 
 * rofl-common implements behaviour of OpenFlow endpoints in a set of 
 * workflow and auxiliary classes. All workflow classes build on top of each
 * other, effectively creating a hierarchy of functional layers. At its top, 
 * class rofl::crofbase 
 * provides a high level simple-to-use interface that serves as main class
 * in rofl-common. Deriving from rofl::crofbase is the most simple and convenient
 * way for adding OpenFlow support to an application.
 *
 * Class cetherswitch defines the main class of ethswctld and derives from 
 * class rofl::crofbase. OpenFlow is a control protocol and requires support for 
 * TCP/IP connectivity from the underlying operating system. rofl-common
 * provides its own @ref common_devel_ioservice for driving associated socket
 * or timer objects. The ethswctld control application uses ROFL's I/O subsystem
 * as its main loop for running its discrete event loop. However, you may 
 * build your own for your main function and run ROFL in a separate thread.
 * ROFL's I/O subsystem supports multi-threaded operations and each class defined
 * in ROFL may be assigned to any of the execution threads dedicated to ROFL. 
 * Whatever strategy you
 * adopt, when assigning a ROFL class instance to a specific thread, you must run ROFL's 
 * I/O loop in this specific execution thread in order to work on the event queue. 
 * See method rofl::cioloop::run() for details.
 *
 * The ethswctld control application supports an arbitrary number of datapath 
 * elements. It defines two main classes: a) Class rofl::examples::ethswctld::cfibtable defines a Forwarding
 * Information Base that stores mappings between individual Ethernet hosts 
 * (to be precise: their ethernet hardware addresses) and the port to be used on 
 * the datapath element for sending frames towards this station. Class rofl::examples::ethswctld::cfibentry
 * stores individual FIB entries. b) Class rofl::examples::ethswctld::cflowtable defines an Active Flows Table
 * for storing unidirectional flows between a pair of ethernet hosts. An active flow
 * is characterized by an OpenFlow flow table entry installed on the datapath element
 * and is represented by an instance of class rofl::examples::ethswctld::cflowentry.
 *
 * Both FIB and flow entries are soft-state entities and demonstrate use of the
 * timer management methods provided by class rofl::ciosrv. They also demonstrate
 * two recurring patterns frequently used in rofl-common:
 *
 * a) Interface definitions for organizing notification exchange between related classes
 * using so-called environment classes.
 *
 * b) Naming of management methods for typical CRUD operations on various objects.    
 */

/**
 * @defgroup common_devel rofl-common for developers
 * @ingroup common
 *
 * This section discusses some internals of rofl-common and how the 
 * various pieces interact with each other.
 */

/**
 * @defgroup common_devel_workflow Workflow
 * @ingroup common_devel
 * 
 * Let's have a look on the classes in rofl-common defining the actual 
 * workflow and how messages traverse the protocol stack. rofl-common 
 * defines a set of classes for implementing the protocol's core logic 
 * actually building a hierarchy starting at a plain socket instance.
 *  
 * All workflow related classes in rofl-common come with their own 
 * environment class (e.g., rofl::crofsock_env for rofl::crofsock) 
 * that defines the interface expected. A class on layer n+1 implements
 * the interface defined by the class located on layer n.
 *
 * a) Class rofl::csocket_plain provides an C++ abstraction for the 
 * BSD sockets offered by the underlying operating system. ROFL allows
 * building of various socket types and a common base class for all 
 * sockets named rofl::csocket. Class csocket_plain provides support
 * for UDP and TCP based unencrypted sockets. Class socket_openssl 
 * uses the OpenSSL toolkit [1] to add TLS based encryption to TCP sockets.  
 *
 * b) Class rofl::crofsock maps OpenFlow messages from their wire 
 * representation into the associated OpenFlow classes defined by 
 * rofl-common and provides support for basic message validation.
 * Class rofl::crofsock implements a weighted fair queueing scheduling
 * for sending out OpenFlow messages and defines four classes for sending
 * OAM messages (Echo-Request/Reply, highest priority 1), management messages 
 * (e.g., Features-Request/Reply, priority 2), control messages (e.g., 
 * all Modify messages including Flow-Removed, priority 3) and user data 
 * related messages (Packet-In and Packet-Out, lowest priority 4). While
 * this may lead to a reordering of OpenFlow messages on the peer side, 
 * class rofl::crofsock does not drop any messages queued for transmission.
 *
 * c) Class rofl::crofconn provides the abstraction of an OpenFlow control connection
 * as defined since OpenFlow v1.3. It negotiates the OpenFlow protocol version to be used
 * with the connected peer entity and detects the datapath identifier when acting in 
 * controller mode. Further, class rofl::crofconn implements OAM management
 * and sends periodic Echo-Requests (when no messages have been received for some
 * time from the peer entity) and Echo-Replies (when an Echo-Request has been received).
 * Similar to class rofl::crofsock, rofconn's reception process provides a weighted
 * fair queueing scheduler for handling certain messages (like OAM) with a higher 
 * priority.
 *
 * d) Class rofl::crofchan binds multiple control connections into an OpenFlow control
 * channel and defines the mutual dependencies between the main control connection 
 * using control connection identifier 0 and the remaining auxiliary control connections.
 *
 * e) Class rofl::crofctl represents a remote controller entity and provides 
 * various methods for sending OpenFlow messages to this controller entity over any
 * of the defined control connections.
 *
 * f) Class rofl::crofdpt represents a remote datapath element and provides
 * various methods for sending OpenFlow messages to this datapath element over any
 * of the defined control connections.
 *
 * g) Class rofl::crofbase defines rofl-common's main class, as any advanced application
 * logic requiring OpenFlow support should derive from this class. It implements all
 * handlers for receiving various notification events from instances of classes 
 * rofl::crofctl and rofl::crofdpt, respectively. Further, it manages an entire set of controllers 
 * and their associated roles properly and offers methods for the asynchronous notifications
 * defined by the OpenFlow specification 
 * 
 * Each layer in the hierarchy adds certain functionality to the overall OpenFlow
 * protocol stack. However, one may split this stack at any layer and use lower 
 * layers as required, e.g., for constructing transparent OpenFlow proxies, class 
 * rofl::crofsock may be used directly for mapping OpenFlow messages between C++ 
 * and TCP while skipping all additional logic like version negotiation via 
 * OpenFlow Hello messages or management if OAM related messages like Echo-Request/Reply.  
 */

/**
 * @defgroup common_devel_ioservice I/O subsystem
 * @ingroup common_devel
 *
 * ROFL defines its own IO service for event handling, e.g., for 
 * dealing with file or socket descriptors. This IO system is used
 * internally by several classes in rofl-common, but may also be used
 * by other external modules making use of rofl-common. Please note, this IO subsystem
 * is not meant to be a high performance one for building packet IO systems, rather
 * it aims towards a simple thread-safe framework for driving logic
 * of OpenFlow management endpoints. 
 */

/**
 * @defgroup common_devel_bsd_sockets BSD sockets
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_exceptions Runtime errors
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_openflow OpenFlow structures and concepts in rofl-common
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_openflow_structures C++ classes representing various C structures in OpenFlow
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_openflow_messages C++ classes representing OpenFlow messages
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_openflow_exceptions OpenFlow runtime errors 
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_openflow_experimental Experimental OpenFlow extensions
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_auxiliary Auxiliary classes providing glue towards the underlying operating system
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_auxiliary_logging rofl-common's logging facility
 * @ingroup common_devel_auxiliary
 */

/**
 * @defgroup common_devel_auxiliary_sockets Use of BSD style sockets in rofl-common including support for OpenSSL
 * @ingroup common_devel_auxiliary
 */

/**
 * @defgroup common_devel_protocols Protocol definitions for Ethernet, VLAN, MPLS, IPv4/v6, ICMPv4/v6/ARP, TCP, UDP, SCTP, ...
 * @ingroup common_devel
 */


